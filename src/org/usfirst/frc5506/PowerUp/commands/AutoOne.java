// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.commands;
import org.usfirst.frc5506.PowerUp.Robot;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 * In a command group, you can run many sequenced commands. To do so, use addSequential(Command command) methods or
 * addParallel(Command command). An addParallel will run at the same time as the command beneath it.
 **/
public class AutoOne extends CommandGroup {
	
	private double waitTime;
	private char endPosition;
	
	public AutoOne() {
		this.endPosition = Robot.endPosition;
		this.waitTime = Robot.waitTime;
		
		addSequential(new Wait(waitTime));
		
		String gameData = Robot.gameData;
		if(gameData!=null) {//if gamedata exists, do auto, if not then its fine, this makes robot code load
			switch(endPosition) {
			case 'b':
				if(gameData.charAt(0)=='L'&&endPosition=='b') {
					addSequential(new DriveLinear(132, '0'));
					addSequential(new Turn(90, false));
					addSequential(new MoveHand(false));
				} else {
					addSequential(new DriveLinear(6, '0'));
					addSequential(new Turn(56.8, false));
					addSequential(new DriveLinear(245, '0'));
					addSequential(new Turn(-56.8, false));
					addSequential(new DriveLinear(300, '1'));
					addSequential(new MoveHand(false));
				}
				break;
				
			case 'c':
				if(gameData.charAt(1)=='L') {//near side
					//home side
				} else {//far side
					
				}
			}
			
			/*switch(endPosition) {
			case 'a':
				addSequential(new DriveLinear(4));
				addSequential(new Turn(-45));
				addSequential(new DriveLinear(47.37615433949868));
				addSequential(new Turn(45));
				addSequential(new DriveLinear(84.75));
			case 'b':
				//WPILib doesn't like recursive calls so just copy-paste the call
				//addSequential(new AutoOne('a', "Yoohoo"));
				addSequential(new DriveLinear(4));
				addSequential(new Turn(-45));
				addSequential(new DriveLinear(47.37615433949868));
				addSequential(new Turn(45));
				addSequential(new DriveLinear(84.75));
				//end AutoOne(a)
				
				if(gameData.charAt(0)=='L') {
					addSequential(new DriveLinear(85));
					addSequential(new Turn(90));
					addParallel(new Curl(30));
					addSequential(new DriveLinear(45));
					addSequential(new MoveHand(false));
				} else {
					addSequential(new DriveLinear(153.75));
					addSequential(new Turn(90));
					addSequential(new DriveLinear(284));
					addSequential(new Turn(90));
					addSequential(new DriveLinear(68.75));
					addSequential(new Turn(90));
					addParallel(new Curl(30));
					addSequential(new DriveLinear(45));
					addSequential(new MoveHand(false));
				}
			//case 'c':
				//SOON
			}*/
		}
	}
}
