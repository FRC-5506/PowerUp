// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.PowerUp.Robot;

/**
 *
 **/
public class Curl extends Command {

    private static final double FORTY_PERCENT_SPEED = 101/3.63;//111 deg per 3.63s
	private double elbowSpeed;
	private boolean timed;
	private double time;

   public Curl(double liftDegrees, boolean timed) {
        this.liftDegrees = liftDegrees;
        this.timed = timed;
        
        //Encoder, make sure that 0 is when arm is parallel to floor
        requires(Robot.elbow);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	System.out.println("CURL INITIALIZED, timed="+timed);
    	if(timed)
        	time = liftDegrees/FORTY_PERCENT_SPEED;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //limit switches are here in auto              //theres a negative here because negative is up, but we want positive up in auto commands
    	elbowSpeed = (liftDegrees/Math.abs(liftDegrees))*-0.4;//get the sign of liftDegrees, find out which way you're going, then move at 30% power
    	System.out.println("elbowSpeed after instantiation: "+elbowSpeed);
    	
        if( !(Robot.elbow.getForeLS().get()) && (elbowSpeed>0) )//front limit switch triggered, and trying to push down
    		elbowSpeed = 0;								//stop the motor!
    	
    	if( !(Robot.elbow.getRearLS().get()) && (elbowSpeed<0) )//rear limit switch triggered, and trying to push up
    		elbowSpeed = 0;							 // then stop the motor!
    	
    	System.out.println("elbowSpeed before rotateArm: "+elbowSpeed);
    	Robot.elbow.rotateArm(elbowSpeed);//if not timed, just run it and isFinished will stop it
    	if(timed)//if it is timed, say how long it should run
    		setTimeout(time);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	System.out.println("isFinished ran");
    	if(!timed)
    		return (liftDegrees+2>Robot.elbow.getArmPos().getDistance()&&liftDegrees-2<Robot.elbow.getArmPos().getDistance());//if distance needed to rotate
		else //is greater than distance rotated
    		return isTimedOut();
    	
    	
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.elbow.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	Robot.arm.stop();//stop first command when the second command 
    					 //comes in with moving=false
    }
    
    private double liftDegrees;
}
