// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.PowerUp.Robot;

/**
 *
 **/
public class Curl extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double elbowSpeed;
	private boolean timed;
	private double time;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
   public Curl(double liftDegrees, boolean timed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        this.liftDegrees = liftDegrees;
        this.timed = timed;
        
        if(timed)
        	time = liftDegrees/90; //TODO make the dividend (divisor?) smaller so that it works
        //Encoder, make sure that 0 is when arm is parallel to floor
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elbow);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //limit switches are here in auto
    	elbowSpeed = (liftDegrees/Math.abs(liftDegrees))*0.3;//get the sign of liftDegrees, find out which way you're going, then move at 30% power
    	
        if( !(Robot.elbow.getForeLS().get()) && (elbowSpeed>0) )//front limit switch triggered, and trying to push down
    		elbowSpeed = 0;								//stop the motor!
    	
    	if( !(Robot.elbow.getRearLS().get()) && (elbowSpeed<0) )//rear limit switch triggered, and trying to push up
    		elbowSpeed = 0;							 // then stop the motor!
    	
    	if(liftDegrees<Robot.elbow.getArmPos().getDistance()) {
    		Robot.elbow.rotateArm(elbowSpeed);
    		if(timed)
    			setTimeout(time);
    	} else {
    		Robot.elbow.rotateArm(elbowSpeed);//play with this number for speed
    		if(timed)
    			setTimeout(time);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if(liftDegrees+2>Robot.elbow.getArmPos().getDistance()&&liftDegrees-2<Robot.elbow.getArmPos().getDistance())//if distance needed to rotate
    		return true;                                 //is greater than distance rotated
    	else                                             //stop rotating
            return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.elbow.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	Robot.arm.stop();//stop first command when the second command 
    					 //comes in with moving=false
    }
    
    private double liftDegrees;
}
