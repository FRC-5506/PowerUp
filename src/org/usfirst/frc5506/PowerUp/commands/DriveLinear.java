// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.PowerUp.Robot;

/**
 *
 */
public class DriveLinear extends Command {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveLinear(double driveDistance, boolean timed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	dist = driveDistance;
    	this.timed = timed;
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	if(timed)
    		dist /= 100;//if going by time, then divide input by 100 TODO: play with value divisor (dividend?) for timed drive
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if(!timed) {//if not based on time, thus based on distance...
        	if(dist<0)//if we need to go backwards, call backwards driveAuto
        		forward = false;
        	else
        		forward = true;
        	
        	Robot.driveBase.driveLinear(forward);
    	} else {//if not not based on time, then it is based on time, so do time drive command
    		Robot.driveBase.driveLinear(forward);//drive forward
    		setTimeout(dist);					 //for however many seconds was inputted
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if(!timed) {//if not  based on time, thus based on distance...
        	aveDist = ( Robot.driveBase.getLeftRotation().getDistance() + Robot.driveBase.getRightRotation().getDistance() ) / 2;
        	if(Math.abs(dist)>Math.abs(aveDist))//if the distance that both wheeltrains moved is less than
        		return false;//the distance needed to travel, keep going
        	else
        		return true;//if it's greater than dist, stop
    	} else {
    		return isTimedOut();//if based on time, see if were done
    	}
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {//this is different than  M.D. we want to be stopped so we can run Turn starting from speed = 0
    	Robot.driveBase.stop();//stop the robot duh
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    
    private double aveDist;
    private double dist;
    private boolean forward;
    private boolean timed;
}
