// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.subsystems;

import org.usfirst.frc5506.PowerUp.RobotMap;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elbow extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//declare/instantiate motor controller for the elbow
	private final WPI_TalonSRX elbow = RobotMap.elbow;
	private final DigitalInput foreLS = RobotMap.foreLS;
	private final DigitalInput rearLS = RobotMap.rearLS;
	private final Encoder armPos = RobotMap.armPos;
	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	//setDefaultCommand(new TeleopArm());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop 	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void rotateArm(double joyAngle) {
    	//this.elbowSpeed = joyAngle;
    	
    	if(!(Math.abs(joyAngle)<.10))//if joystick is in center, don't get a new value
        	oneDvector = joyAngle;//get a new value
        	else
        	oneDvector = 0;//if a new value isn't taken, i.e. joystick is centered, the
        					//percentage becomes 0
    	elbow.set(0.6*oneDvector);//Power TalonSRX at whatever joystick says, 60% power
    }
    
    public DigitalInput getForeLS() {
    	return foreLS;
    }
    
    public DigitalInput getRearLS() {
    	return rearLS;
    }
    
    public void stop() {
    	elbow.set(0);
    }
    
    public Encoder getArmPos() {
		return armPos;
	}

	private double oneDvector;//make this a variable for rotateArm method only
}

