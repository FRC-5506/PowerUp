// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp.subsystems;

import org.usfirst.frc5506.PowerUp.Robot;
import org.usfirst.frc5506.PowerUp.RobotMap;
import org.usfirst.frc5506.PowerUp.commands.TeleopDrive;
//import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final Encoder leftRevs = RobotMap.leftRevs;
    private final Encoder rightRevs = RobotMap.rightRevs;
    private final DifferentialDrive drive = RobotMap.drive;
    
    
    //private final AnalogGyro gyro = RobotMap.gyro;
	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new TeleopDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double forwardLeft, double turnRight) {
        //deadband
        if(Math.abs(forwardLeft) < .10)
        forwardLeft = 0;
        
        if(Math.abs(turnRight)<.10)
        	turnRight = 0;
        
        if(Robot.driveMode)//if arcadeDrive is selected on smartdash
        drive.arcadeDrive(forwardLeft, turnRight);//arcade drive
        
        else {//if tank drive selected
        	drive.tankDrive(forwardLeft, turnRight);//tank drive
        }
    }
    
    public Encoder getLeftRotation() {
    	return leftRevs;
    }
    
    public Encoder getRightRotation() {
    	return rightRevs;
    }
    
    public void resetEncoders() {
    	leftRevs.reset();
    	rightRevs.reset();
    }

    public void driveLinear(boolean forwards) {
    	if(forwards)
    		direction = 0.5;
    	else
    		direction = -0.5;
    	
    	difference = rightRevs.getDistance()-leftRevs.getDistance();//difference of distances
    																//wheels travelled
    	
    	if(Math.abs(difference)>1)//if one side has gone farther than another
    		correction = difference;//turn the robot the amount that it's off
    	else
    		correction = 0;
    	
    	drive(direction, (correction/20));//play with this number -- imprecise
    								//if it gets off by more than half an inch, turn at 5%
    }
    
    public void stop() {
    	drive.stopMotor();//stop DifferentialDrive object
    }
    
    public DifferentialDrive getMotors() {
    	return drive;
    }
    
    private double direction;
    private double correction;
    private double difference;
}