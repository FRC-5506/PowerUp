// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.PowerUp;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5506.PowerUp.commands.*;
import org.usfirst.frc5506.PowerUp.subsystems.*;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
//import edu.wpi.first.wpilibj.Compressor;//Compressor is working, so we don't mess with it *grimacing grin*
import edu.wpi.first.wpilibj.DriverStation;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    SendableChooser<Boolean> arcadeDriveMode = new SendableChooser<>();
    
    //SendableChooser<Double> waitTimeChooser = new SendableChooser<>();//TODO: 1
  //This allows an option for tank or arcade drive to be put on SmartDash

    public static double waitTime;//TODO: 1
    public static double elbowUp;
    public static double elbowDown;
    public static boolean driveMode;
    public static double elbowSpeed;
    public static double forward;
    public static double turn;
    public static OI oi;
    public static PowerDistributionPanel pdp;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static Elbow elbow;
    public static Arm arm;
    public static Hand hand;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //int c=0; -- Testing Purposes
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        
        //Compressor comp = new Compressor(0);
        //comp.clearAllPCMStickyFaults();
        @SuppressWarnings("unused")//all these tags do is get rid of a yellow warning
		UsbCamera cam1 = CameraServer.getInstance().startAutomaticCapture();//only lines for cams; only need to
        @SuppressWarnings("unused")
        UsbCamera cam2 = CameraServer.getInstance().startAutomaticCapture();//declare objects if there is more than one camera
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        elbow = new Elbow();
        arm = new Arm();
        hand = new Hand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pdp = new PowerDistributionPanel();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        //add choices for driveMode
        arcadeDriveMode.addDefault("Arcade Drive", new Boolean(true));
        arcadeDriveMode.addObject("Tank Drive", new Boolean(false));
        //add the chooser to smartdashboard
        SmartDashboard.putData("Drive Mode", arcadeDriveMode);
        
        
        //waitTimeChooser.addDefault("0", 0);TODO: 1
        //waitTimeChooser.addObject("1", 1);
        //waitTimeChooser.addObject("2", 2);
        
        //SmartDashboard.putData("Wait Time", waitTimeChooser);//TODO:1
        
        // Add commands to Autonomous Sendable Chooser
        chooser.addDefault("Default -- #a [10']", new AutoBoring());
        
        
        chooser.addObject("1a", new AutoOne('a', DriverStation.getInstance().getGameSpecificMessage()/*, waitTime TODO:1*/));
        chooser.addObject("1b", new AutoOne('b', DriverStation.getInstance().getGameSpecificMessage()));
        //chooser.addObject("1c", new AutoOne(c, /*String LRR*/));
        
        chooser.addObject("2a", new AutoTwo('a', DriverStation.getInstance().getGameSpecificMessage()));
        chooser.addObject("2b", new AutoTwo('b', DriverStation.getInstance().getGameSpecificMessage()));
        //chooser.addObject("2c", new AutoTwo(c, /*String LRR*/));
        
        chooser.addObject("3a", new AutoThree('a', DriverStation.getInstance().getGameSpecificMessage()));
        chooser.addObject("3b", new AutoThree('b', DriverStation.getInstance().getGameSpecificMessage()));
        //chooser.addObject("3c", new AutoThree(c, /*String LRR*/));
        
        SmartDashboard.putData("Autonomous Chooser", chooser);
        //Show the auto chooser on smart dashboard
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
        //showPDPStats();
    }

    @Override
    public void autonomousInit() {
    	//waitTime = waitTimeChooser.getSelected();//TODO:1
        autonomousCommand = chooser.getSelected();
        //DriveBase.gyro.reset();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
    	//reset all encoders
    	Robot.driveBase.leftRevs.reset();
    	Robot.driveBase.rightRevs.reset();
    	//Robot.arm.armRevs.reset();//TODO: encoder armPos
    	
    	driveMode = arcadeDriveMode.getSelected();
    	
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	Scheduler.getInstance().run();
    	
    	/*Compressor comp = new Compressor(0);
        comp.clearAllPCMStickyFaults();
        System.out.println("Compressor connected: "+!comp.getCompressorNotConnectedFault());
        System.out.println("PCM Sticky Fault: "+comp.getCompressorNotConnectedStickyFault());*/
    	
    	//showPDPStats();
        
        /**Testing Purposes: Find how values were working -- Remember to uncomment instantiation
         * c++;
         * if(c==50) {
         * System.out.println(elbowSpeed+" -- Robot's elbowSpeed");
         * System.out.println(forward+" -- Robot's forward");
         * c=0;}
         */
    }
    
    /*private static void showPDPStats() {
    	double[] pdpStats = new double[10];
    	
    	pdpStats[0] = pdp.getTotalCurrent();
    	pdpStats[1] = pdp.getCurrent(0);
    	pdpStats[2] = pdp.getCurrent(1);
    	pdpStats[3] = pdp.getCurrent(2);
    	pdpStats[4] = pdp.getCurrent(3);
    	pdpStats[5] = pdp.getCurrent(7);

    	
    	SmartDashboard.putNumberArray("PDP Stats", pdpStats);
    }*/
}
